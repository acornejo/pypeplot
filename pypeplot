#!/usr/bin/env python

# Alex Cornejo <acornejo@gmail.com> 2013
# Source released under MIT license

import sys
import os
import signal
import argparse
import Queue as Q
from collections import deque
from multiprocessing import Queue


def print_error(err):
    sys.stderr.write("pypeplot error: " + err + "\n")


def print_info(msg):
    sys.stdout.write(msg + "\n")


def getdata(q):
    nums = q.get()
    if nums is None:
        return None
    else:
        data = [[n] for n in nums]
    while True:
        try:
            nums = q.get(False)
            if nums is None:
                return data
            else:
                for i, n in enumerate(nums):
                    data[i].append(n)
        except Q.Empty:
            return data


def plotloop(q, args):
    try:
        import matplotlib.pyplot as plt
    except:
        print_error("matplotlib not found\n\
        matplotlib is available from apt-get, yum, brew or pip.\n\
        see http://matplotlib.org/faq/installing_faq.html\n")
        sys.exit(1)

    data = getdata(q)
    if data is None:
        print_error("no data received!")
        return 1

    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_yscale('linear')  # log, symlog
    ax.grid(True)

    lines = []
    for i in range(len(data)-1):
        if args.style:
            l, = ax.plot([], args.style[i])
        else:
            l, = ax.plot([])
        lines.append(l)

    if args.title:
        ax.set_title(args.title)
    if args.legend:
        ax.legend(args.legend)
    if args.xlabel:
        ax.set_xlabel(args.xlabel)
    if args.ylabel:
        ax.set_ylabel(args.ylabel)

    xdata = deque([], args.samples)
    ydata = [deque([], args.samples) for i in range(len(lines))]
    x_index = len(data) - 1

    plt.ion()
    fig.show()
    while data is not None:
        # update xdata
        xdata.extend(data[x_index])

        # update ydata
        for i, l in enumerate(lines):
            ydata[i].extend(data[i])
            # set plot to use new data
            l.set_xdata(xdata)
            l.set_ydata(ydata[i])

        ax.relim()
        ax.autoscale()
        if args.ymax:
            ax.set_ylim(top=args.ymax)
        if args.ymin:
            ax.set_ylim(bottom=args.ymin)
        plt.draw()
        fig.canvas.flush_events()

        data = getdata(q)

    plt.ioff()
    plt.show()


def oneline():
    buf = ''
    try:
        while True:
            next_char = sys.stdin.read(1)
            buf = buf + next_char
            if next_char == '' or next_char == '\n':
                return buf
    except:
        return buf


def readloop(q, line, args):
    cur_x = 0
    while True:
        if args.tee:
            sys.stdout.write(line)
        try:
            columns = line.strip().split(args.delimiter)
            nums = [float(columns[c]) for c in args.columns]
            if args.xcolumn is not None:
                nums.append(float(columns[args.xcolumn]))
            else:
                nums.append(cur_x)
                cur_x = cur_x + 1
            q.put(nums)
        except:
            print_error("unexpected line: " + line)
        line = oneline()
        if line == '':
            quitplot(q)
            return


def quitplot(q):
    q.put(None)
    q.put(None)


def cleanup(q, pid=None):
    def cleanup_closure(signal, frame):
        quitplot(q)
        if pid:
            os.kill(pid)
    return cleanup_closure


def create_parser():
    parser = argparse.ArgumentParser(
        description="python pipe plotter",
        epilog="example: seq 100 | awk '{print sin($1/10)}' | pypeplot")
    parser.add_argument('--tee', '-t', action='store_const',
                        help='copy standard input to standard output',
                        default=False, const=True, dest='tee')
    parser.add_argument('--delimiter', '-D', action='store', type=str,
                        default=' ',
                        help='string used as column delimiter (default: " ")')
    parser.add_argument('--samples', '-S', action='store', type=int,
                        default=50,
                        help='number of sliding window samples (default: 50)')
    parser.add_argument('--columns', '-c', nargs='+', action='store',
                        type=int, default=None,
                        help='list of column indices to plot (default: all)')
    parser.add_argument('--xcolumn', action='store', type=int,
                        default=None, help='index of column to use as x-axis')
    parser.add_argument('--idcolumn', action='store', type=int,
                        default=None, help='column to use as identifier')
    parser.add_argument('--title', action='store', type=str,
                        default=None, help='plot title (default: None)')
    parser.add_argument('--xlabel', action='store', type=str,
                        default=None, help='x-axis label (default: None)')
    parser.add_argument('--ylabel', action='store', type=str,
                        default=None, help='y-axis label (default: None)')
    parser.add_argument('--legend', '-l', nargs='+', action='store',
                        type=str, default=None,
                        help='legend for each plot (default: None)')
    parser.add_argument('--style', '-s', nargs='+', action='store', type=str,
                        default=None,
                        help='style for each plot (default: auto)')
    parser.add_argument('--ymin', action='store', type=float, default=None,
                        help='minimum limit y-axis range (default: auto)')
    parser.add_argument('--ymax', action='store', type=float, default=None,
                        help='maximum limit y-axis range (default: auto)')

    return parser


def check_args(args, num_cols):
    if args.xcolumn is not None and args.xcolumn >= num_cols:
        print_error("can't find xcolumn %d, only %d columns available"
                    % (args.xcolumn, num_cols))
        return False

    if args.idcolumn is not None and args.idcolumn >= num_cols:
        print_error("can't find idcolumn %d, only %d columns available"
                    % (args.idcolumn, num_cols))
        return False

    if args.legend and len(args.legend) != len(args.columns):
        print_error("received %d plot labels and expected %d"
                    % (len(args.legend), len(args.columns)))
        return False

    if args.style and len(args.style) != len(args.columns):
        print_error("received %d plot styles and expected %d"
                    % (len(args.style), len(args.columns)))
        return False

    return True


def main(cmd_args=None):
    parser = create_parser()
    args = parser.parse_args(cmd_args)

    if sys.stdin.isatty():
        print_error("expected pipe as stdin\n")
        parser.print_help()
        return 1
    else:
        line = oneline()
        if line == '':
            print_error("received empty line")
            return 1

    if args.samples <= 0:
        args.samples = None

    num_cols = len(line.strip().split(args.delimiter))
    if not args.columns:
        if args.xcolumn is not None:
            args.columns = [i for i in range(num_cols) if i != args.xcolumn]
        else:
            args.columns = range(num_cols)

    if not check_args(args, num_cols):
        return 1

    # Using os.fork instead of multiprocess.Process to allow plot to
    # continue to remain on background after parent process has exited.
    # This is possible with fork or using additional package
    # dependencies, which I wanted to avoid at all costs.
    q = Queue()
    child_pid = os.fork()
    if child_pid == 0:
        signal.signal(signal.SIGINT, cleanup(q))
        plotloop(q, args)
    else:
        signal.signal(signal.SIGINT, cleanup(q, child_pid))
        readloop(q, line, args)
        if not args.tee:
            print_info("data sent, close plot window (PID=%d) to exit."
                       % child_pid)

    return 0


if __name__ == '__main__':
    sys.exit(main())
